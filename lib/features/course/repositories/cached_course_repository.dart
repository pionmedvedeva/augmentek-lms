import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../core/cache/app_cache.dart';
import '../../../core/config/app_constants.dart';
import '../../../core/config/app_environment.dart';
import '../../../core/utils/app_logger.dart';
import '../../../shared/models/course.dart';

/// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫—É—Ä—Å–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
class CachedCourseRepository with CacheableMixin {
  final FirebaseFirestore _firestore;
  
  CachedCourseRepository(this._firestore);
  
  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<List<Course>> getAllCourses({bool forceRefresh = false}) async {
    const cacheKey = 'courses_all';
    
    return await cached<List<Course>>(
      cacheKey,
      () => _fetchCoursesFromFirestore(),
      expiration: EnvironmentConfig.cacheDuration,
      forceRefresh: forceRefresh,
    ) ?? [];
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<List<Course>> getActiveCourses({bool forceRefresh = false}) async {
    const cacheKey = 'courses_active';
    
    return await cached<List<Course>>(
      cacheKey,
      () => _fetchActiveCoursesFromFirestore(),
      expiration: EnvironmentConfig.cacheDuration,
      forceRefresh: forceRefresh,
    ) ?? [];
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –ø–æ ID —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<Course?> getCourseById(String courseId, {bool forceRefresh = false}) async {
    final cacheKey = 'course_$courseId';
    
    return await cached<Course?>(
      cacheKey,
      () => _fetchCourseByIdFromFirestore(courseId),
      expiration: EnvironmentConfig.cacheDuration,
      forceRefresh: forceRefresh,
    );
  }
  
  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å
  Future<String> createCourse(Course course) async {
    AppLogger.info('üìö Creating new course: ${course.title}');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –≤ Firestore
      final docRef = await _firestore
          .collection(AppEndpoints.courses)
          .add(course.toJson());
      
      final courseWithId = course.copyWith(id: docRef.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
      await _updateCourseCache(courseWithId);
      await _invalidateCoursesListCache();
      
      AppLogger.info('‚úÖ Course created successfully: ${docRef.id}');
      return docRef.id;
    } catch (e) {
      AppLogger.error('‚ùå Failed to create course: $e');
      rethrow;
    }
  }
  
  /// –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å
  Future<void> updateCourse(Course course) async {
    AppLogger.info('üìù Updating course: ${course.id}');
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Firestore
      await _firestore
          .collection(AppEndpoints.courses)
          .doc(course.id)
          .update(course.toJson());
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
      await _updateCourseCache(course);
      await _invalidateCoursesListCache();
      
      AppLogger.info('‚úÖ Course updated successfully: ${course.id}');
    } catch (e) {
      AppLogger.error('‚ùå Failed to update course: $e');
      rethrow;
    }
  }
  
  /// –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å
  Future<void> deleteCourse(String courseId) async {
    AppLogger.info('üóëÔ∏è Deleting course: $courseId');
    
    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑ Firestore
      await _firestore
          .collection(AppEndpoints.courses)
          .doc(courseId)
          .delete();
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à
      await cache.remove('course_$courseId');
      await _invalidateCoursesListCache();
      
      AppLogger.info('‚úÖ Course deleted successfully: $courseId');
    } catch (e) {
      AppLogger.error('‚ùå Failed to delete course: $e');
      rethrow;
    }
  }
  
  /// –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  Future<List<Course>> searchCourses(String query, {bool forceRefresh = false}) async {
    if (query.trim().isEmpty) {
      return getActiveCourses(forceRefresh: forceRefresh);
    }
    
    final cacheKey = 'courses_search_${query.toLowerCase().trim()}';
    
    return await cached<List<Course>>(
      cacheKey,
      () => _searchCoursesInFirestore(query),
      expiration: const Duration(minutes: 30), // –ö–æ—Ä–æ—Ç–∫–∏–π –∫–µ—à –¥–ª—è –ø–æ–∏—Å–∫–∞
      forceRefresh: forceRefresh,
    ) ?? [];
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<List<Course>> getUserEnrolledCourses(String userId, {bool forceRefresh = false}) async {
    final cacheKey = 'user_courses_$userId';
    
    return await cached<List<Course>>(
      cacheKey,
      () => _fetchUserCoursesFromFirestore(userId),
      expiration: const Duration(hours: 1), // –°—Ä–µ–¥–Ω–∏–π –∫–µ—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      forceRefresh: forceRefresh,
    ) ?? [];
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É—Ä—Å–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  Future<CourseStats> getCourseStats(String courseId, {bool forceRefresh = false}) async {
    final cacheKey = 'course_stats_$courseId';
    
    return await cached<CourseStats>(
      cacheKey,
      () => _fetchCourseStatsFromFirestore(courseId),
      expiration: const Duration(minutes: 15), // –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      forceRefresh: forceRefresh,
    ) ?? CourseStats.empty();
  }
  
  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firestore
  
  Future<List<Course>> _fetchCoursesFromFirestore() async {
    AppLogger.debug('üîÑ Fetching all courses from Firestore');
    
    final snapshot = await _firestore
        .collection(AppEndpoints.courses)
        .get();
    
    final courses = snapshot.docs
        .map((doc) => Course.fromJson({...doc.data(), 'id': doc.id}))
        .toList();
    
    AppLogger.debug('üìö Fetched ${courses.length} courses from Firestore');
    return courses;
  }
  
  Future<List<Course>> _fetchActiveCoursesFromFirestore() async {
    AppLogger.debug('üîÑ Fetching active courses from Firestore');
    
    final snapshot = await _firestore
        .collection(AppEndpoints.courses)
        .where('isActive', isEqualTo: true)
        .get();
    
    final courses = snapshot.docs
        .map((doc) => Course.fromJson({...doc.data(), 'id': doc.id}))
        .toList();
    
    AppLogger.debug('üìö Fetched ${courses.length} active courses from Firestore');
    return courses;
  }
  
  Future<Course?> _fetchCourseByIdFromFirestore(String courseId) async {
    AppLogger.debug('üîÑ Fetching course by ID from Firestore: $courseId');
    
    final doc = await _firestore
        .collection(AppEndpoints.courses)
        .doc(courseId)
        .get();
    
    if (!doc.exists) {
      AppLogger.warning('‚ö†Ô∏è Course not found: $courseId');
      return null;
    }
    
    final course = Course.fromJson({...doc.data()!, 'id': doc.id});
    AppLogger.debug('üìö Fetched course from Firestore: ${course.title}');
    return course;
  }
  
  Future<List<Course>> _searchCoursesInFirestore(String query) async {
    AppLogger.debug('üîç Searching courses in Firestore: $query');
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Algolia –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ä–µ—à–µ–Ω–∏—è)
    final snapshot = await _firestore
        .collection(AppEndpoints.courses)
        .where('isActive', isEqualTo: true)
        .get();
    
    final queryLower = query.toLowerCase();
    final courses = snapshot.docs
        .map((doc) => Course.fromJson({...doc.data(), 'id': doc.id}))
        .where((course) => 
            course.title.toLowerCase().contains(queryLower) ||
            course.description.toLowerCase().contains(queryLower))
        .toList();
    
    AppLogger.debug('üîç Found ${courses.length} courses matching: $query');
    return courses;
  }
  
  Future<List<Course>> _fetchUserCoursesFromFirestore(String userId) async {
    AppLogger.debug('üîÑ Fetching user enrolled courses: $userId');
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final enrollmentsSnapshot = await _firestore
        .collection(AppEndpoints.enrollments)
        .where('userId', isEqualTo: userId)
        .get();
    
    if (enrollmentsSnapshot.docs.isEmpty) {
      return [];
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –∫—É—Ä—Å–æ–≤
    final courseIds = enrollmentsSnapshot.docs
        .map((doc) => doc.data()['courseId'] as String)
        .toList();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤)
    final courses = <Course>[];
    const batchSize = 10; // Firestore limit for 'in' queries
    
    for (int i = 0; i < courseIds.length; i += batchSize) {
      final batch = courseIds.skip(i).take(batchSize).toList();
      
      final snapshot = await _firestore
          .collection(AppEndpoints.courses)
          .where(FieldPath.documentId, whereIn: batch)
          .get();
      
      courses.addAll(
        snapshot.docs.map((doc) => Course.fromJson({...doc.data(), 'id': doc.id}))
      );
    }
    
    AppLogger.debug('üìö Fetched ${courses.length} enrolled courses for user: $userId');
    return courses;
  }
  
  Future<CourseStats> _fetchCourseStatsFromFirestore(String courseId) async {
    AppLogger.debug('üìä Fetching course stats: $courseId');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    final enrollmentsSnapshot = await _firestore
        .collection(AppEndpoints.enrollments)
        .where('courseId', isEqualTo: courseId)
        .get();
    
    final enrolledCount = enrollmentsSnapshot.docs.length;
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ —Ç.–¥.)
    
    final stats = CourseStats(
      courseId: courseId,
      enrolledCount: enrolledCount,
      completedCount: 0, // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
      averageRating: 0.0, // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏
      lastUpdated: DateTime.now(),
    );
    
    AppLogger.debug('üìä Course stats: enrolled=$enrolledCount');
    return stats;
  }
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º
  
  Future<void> _updateCourseCache(Course course) async {
    await cache.set('course_${course.id}', course);
  }
  
  Future<void> _invalidateCoursesListCache() async {
    await cache.remove('courses_all');
    await cache.remove('courses_active');
    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø–æ–∏—Å–∫–∞, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ
  }
  
  /// –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à –∫—É—Ä—Å–æ–≤
  Future<void> clearCache() async {
    AppLogger.info('üßπ Clearing courses cache');
    
    final stats = await cache.getStats();
    AppLogger.debug('üìä Cache stats before clearing: $stats');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫—É—Ä—Å–æ–≤ –≤ –∫–µ—à–µ
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    await cache.clear();
    
    AppLogger.info('‚úÖ Courses cache cleared');
  }
  
  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–µ—à–∏ –∫—É—Ä—Å–æ–≤
  Future<void> refreshAllCaches() async {
    AppLogger.info('üîÑ Refreshing all course caches');
    
    await Future.wait([
      getAllCourses(forceRefresh: true),
      getActiveCourses(forceRefresh: true),
    ]);
    
    AppLogger.info('‚úÖ All course caches refreshed');
  }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–∞
class CourseStats {
  final String courseId;
  final int enrolledCount;
  final int completedCount;
  final double averageRating;
  final DateTime lastUpdated;
  
  const CourseStats({
    required this.courseId,
    required this.enrolledCount,
    required this.completedCount,
    required this.averageRating,
    required this.lastUpdated,
  });
  
  factory CourseStats.empty() => CourseStats(
    courseId: '',
    enrolledCount: 0,
    completedCount: 0,
    averageRating: 0.0,
    lastUpdated: DateTime.now(),
  );
  
  @override
  String toString() => 'CourseStats(enrolled: $enrolledCount, completed: $completedCount, rating: $averageRating)';
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫—É—Ä—Å–æ–≤
final cachedCourseRepositoryProvider = Provider<CachedCourseRepository>((ref) {
  final firestore = FirebaseFirestore.instance;
  return CachedCourseRepository(firestore);
}); 