import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../core/utils/app_logger.dart';
import '../../../shared/models/lesson_progress.dart';
import '../../../shared/models/course_progress.dart';
import '../../../shared/models/homework_submission.dart';
import '../repositories/progress_repository.dart';

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
final progressRepositoryProvider = Provider<ProgressRepository>((ref) {
  return ProgressRepository();
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞
final courseProgressProvider = FutureProvider.family<CourseProgress?, String>((ref, params) async {
  final parts = params.split('_');
  if (parts.length != 2) return null;
  
  final userId = parts[0];
  final courseId = parts[1];
  
  final repository = ref.read(progressRepositoryProvider);
  return repository.getCourseProgress(userId, courseId);
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–≤ –∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final userCourseProgressesProvider = FutureProvider.family<List<CourseProgress>, String>((ref, userId) async {
  final repository = ref.read(progressRepositoryProvider);
  return repository.getUserCourseProgresses(userId);
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
final nextLessonProvider = FutureProvider.family<Map<String, String>?, String>((ref, userId) async {
  final repository = ref.read(progressRepositoryProvider);
  return repository.getNextLesson(userId);
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞
final lessonProgressProvider = FutureProvider.family<LessonProgress?, String>((ref, params) async {
  final parts = params.split('_');
  if (parts.length != 2) return null;
  
  final userId = parts[0];
  final lessonId = parts[1];
  
  final repository = ref.read(progressRepositoryProvider);
  return repository.getLessonProgress(userId, lessonId);
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–≤ —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞
final courseLessonProgressesProvider = FutureProvider.family<List<LessonProgress>, String>((ref, params) async {
  final parts = params.split('_');
  if (parts.length != 2) return [];
  
  final userId = parts[0];
  final courseId = parts[1];
  
  final repository = ref.read(progressRepositoryProvider);
  return repository.getLessonProgressesForCourse(userId, courseId);
});

// –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
class ProgressNotifier extends StateNotifier<AsyncValue<void>> {
  ProgressNotifier(this._repository) : super(const AsyncValue.data(null));

  final ProgressRepository _repository;

  /// –û—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –Ω–∞—á–∞—Ç—ã–π
  Future<void> markLessonStarted(String userId, String courseId, String lessonId) async {
    state = const AsyncValue.loading();
    try {
      await _repository.markLessonStarted(userId, courseId, lessonId);
      state = const AsyncValue.data(null);
      AppLogger.info('–£—Ä–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–∞—á–∞—Ç—ã–π');
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
      AppLogger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É—Ä–æ–∫–∞ –∫–∞–∫ –Ω–∞—á–∞—Ç–æ–≥–æ: $e');
    }
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
  Future<void> markLessonCompleted(String userId, String courseId, String lessonId) async {
    state = const AsyncValue.loading();
    try {
      await _repository.markLessonCompleted(userId, courseId, lessonId);
      state = const AsyncValue.data(null);
      AppLogger.info('–£—Ä–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π');
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
      AppLogger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ: $e');
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  Future<void> updateHomeworkProgress(String userId, String lessonId, {
    bool? submitted,
    bool? completed,
  }) async {
    state = const AsyncValue.loading();
    try {
      await _repository.updateHomeworkProgress(
        userId, 
        lessonId,
        submitted: submitted,
        completed: completed,
      );
      state = const AsyncValue.data(null);
      AppLogger.info('–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–º–∞—à–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
      AppLogger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ–º–∞—à–∫–∏: $e');
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º
  Future<void> syncHomeworkProgress(String userId, String lessonId, HomeworkStatus status) async {
    state = const AsyncValue.loading();
    try {
      await _repository.syncHomeworkProgress(userId, lessonId, status);
      state = const AsyncValue.data(null);
      AppLogger.info('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–æ–º–∞—à–∫–æ–π');
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
      AppLogger.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: $e');
    }
  }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
final progressNotifierProvider = StateNotifierProvider<ProgressNotifier, AsyncValue<void>>((ref) {
  return ProgressNotifier(ref.read(progressRepositoryProvider));
});

/// –•–µ–ª–ø–µ—Ä-–∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ UI
class ProgressHelper {
  /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —É—Ä–æ–∫–∞
  static Color getStatusColor(LessonStatus status) {
    switch (status) {
      case LessonStatus.notStarted:
        return Colors.grey;
      case LessonStatus.inProgress:
        return Colors.orange;
      case LessonStatus.completed:
        return Colors.green;
      case LessonStatus.pendingReview:
        return Colors.blue;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —É—Ä–æ–∫–∞
  static IconData getStatusIcon(LessonStatus status) {
    switch (status) {
      case LessonStatus.notStarted:
        return Icons.radio_button_unchecked;
      case LessonStatus.inProgress:
        return Icons.play_circle_outline;
      case LessonStatus.completed:
        return Icons.check_circle;
      case LessonStatus.pendingReview:
        return Icons.pending;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —É—Ä–æ–∫–∞
  static String getStatusText(LessonStatus status) {
    switch (status) {
      case LessonStatus.notStarted:
        return '–ù–µ –Ω–∞—á–∞—Ç';
      case LessonStatus.inProgress:
        return '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
      case LessonStatus.completed:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      case LessonStatus.pendingReview:
        return '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞
  static Color getCourseProgressColor(double progress) {
    if (progress == 0.0) return Colors.grey;
    if (progress < 0.3) return Colors.red;
    if (progress < 0.7) return Colors.orange;
    return Colors.green;
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
  static String formatStudyTime(int seconds) {
    if (seconds < 60) return '$seconds —Å–µ–∫';
    if (seconds < 3600) return '${(seconds / 60).round()} –º–∏–Ω';
    return '${(seconds / 3600).toStringAsFixed(1)} —á';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  static String getMotivationalMessage(CourseProgress progress) {
    final percent = progress.completionPercent;
    
    if (percent == 0) {
      return '–í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å! –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –∂–¥–µ—Ç —Ç–µ–±—è üöÄ';
    } else if (percent < 25) {
      return '–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™';
    } else if (percent < 50) {
      return '–¢—ã –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ —Ü–µ–ª–∏! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è üéØ';
    } else if (percent < 75) {
      return '–ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –ø–æ–∑–∞–¥–∏! –§–∏–Ω–∏—à —É–∂–µ –±–ª–∏–∑–∫–æ üèÉ‚Äç‚ôÇÔ∏è';
    } else if (percent < 100) {
      return '–ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ üî•';
    } else {
      return '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ';
    }
  }
}

/// –í–∏–¥–∂–µ—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
class ProgressTracker extends ConsumerWidget {
  const ProgressTracker({
    super.key,
    required this.userId,
    required this.courseId,
    required this.lessonId,
    required this.child,
    this.autoMarkStarted = true,
  });

  final String userId;
  final String courseId;
  final String lessonId;
  final Widget child;
  final bool autoMarkStarted;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –Ω–∞—á–∞—Ç—ã–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
    if (autoMarkStarted) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        ref.read(progressNotifierProvider.notifier)
            .markLessonStarted(userId, courseId, lessonId);
      });
    }

    return child;
  }
} 