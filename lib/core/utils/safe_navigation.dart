import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:miniapp/features/auth/providers/user_provider.dart';
import 'package:miniapp/core/utils/app_logger.dart';
import 'package:miniapp/core/utils/notification_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
/// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–Ω–∞–∑–∞–¥" —Å deep link —ç–∫—Ä–∞–Ω–æ–≤
class SafeNavigation {
  
  /// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è "–Ω–∞–∑–∞–¥"
  /// –ï—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ - –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
  static Future<void> safeGoBack(BuildContext context, WidgetRef ref) async {
    AppLogger.info('üß≠ SafeNavigation: safeGoBack() called');
    AppLogger.info('üß≠ Current route: ${GoRouterState.of(context).uri.toString()}');
    AppLogger.info('üß≠ Can pop: ${context.canPop()}');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
    final loadingOverlay = NotificationService.showLoading('–ü–µ—Ä–µ—Ö–æ–¥...');
    
    try {
      // –í Telegram WebApp –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      AppLogger.info('üß≠ Using fallback navigation for Telegram WebApp');
      await _navigateToSafeScreen(context, ref);
    } catch (e) {
      AppLogger.error('‚ùå Error in safeGoBack: $e');
      NotificationService.showError('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback - –≤—Å–µ–≥–¥–∞ –∏–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      if (context.mounted) {
        context.go('/');
      }
    } finally {
      // –£–±–∏—Ä–∞–µ–º loading
      loadingOverlay.remove();
    }
  }
  
  /// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è "–Ω–∞–∑–∞–¥" –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
  static Future<void> safeGoBackForAdmin(BuildContext context, WidgetRef ref, String? courseId) async {
    AppLogger.info('üß≠ SafeNavigation: safeGoBackForAdmin() called with courseId: $courseId');
    AppLogger.info('üß≠ Current route: ${GoRouterState.of(context).uri.toString()}');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
    final loadingOverlay = NotificationService.showLoading('–ü–µ—Ä–µ—Ö–æ–¥...');
    
    try {
      // –í Telegram WebApp –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      if (courseId != null) {
        AppLogger.info('üß≠ Safe admin navigation: to course content $courseId');
        context.go('/admin/courses/$courseId');
      } else {
        AppLogger.info('üß≠ Safe admin navigation: to course management');
        context.go('/admin/courses');
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      await Future.delayed(const Duration(milliseconds: 300));
      AppLogger.info('‚úÖ Admin navigation completed');
      
    } catch (e) {
      AppLogger.error('‚ùå Error in safeGoBackForAdmin: $e');
      NotificationService.showError('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
      // Fallback –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥
      if (context.mounted) {
        context.go('/admin');
      }
    } finally {
      // –£–±–∏—Ä–∞–µ–º loading
      loadingOverlay.remove();
    }
  }
  
  /// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è "–Ω–∞–∑–∞–¥" –¥–ª—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
  static Future<void> safeGoBackForStudent(BuildContext context, WidgetRef ref, String? courseId) async {
    AppLogger.info('üß≠ SafeNavigation: safeGoBackForStudent() called with courseId: $courseId');
    AppLogger.info('üß≠ Current route: ${GoRouterState.of(context).uri.toString()}');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
    final loadingOverlay = NotificationService.showLoading('–ü–µ—Ä–µ—Ö–æ–¥...');
    
    try {
      // –í Telegram WebApp –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      if (courseId != null) {
        AppLogger.info('üß≠ Safe student navigation: to student course $courseId');
        context.go('/student/course/$courseId');
      } else {
        AppLogger.info('üß≠ Safe student navigation: to student dashboard');
        context.go('/student');
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      await Future.delayed(const Duration(milliseconds: 300));
      AppLogger.info('‚úÖ Student navigation completed');
      
    } catch (e) {
      AppLogger.error('‚ùå Error in safeGoBackForStudent: $e');
      NotificationService.showError('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
      // Fallback –Ω–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥
      if (context.mounted) {
        context.go('/student');
      }
    } finally {
      // –£–±–∏—Ä–∞–µ–º loading
      loadingOverlay.remove();
    }
  }
  
  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  static Future<void> _navigateToSafeScreen(BuildContext context, WidgetRef ref) async {
    final user = ref.read(userProvider).value;
    
    AppLogger.info('üß≠ _navigateToSafeScreen: user = ${user?.firstName ?? "null"}');
    AppLogger.info('üß≠ _navigateToSafeScreen: isAdmin = ${user?.isAdmin ?? false}');
    
    if (user == null) {
      AppLogger.info('üß≠ Safe navigation: user not found, going to home');
      context.go('/');
      return;
    }
    
    if (user.isAdmin) {
      AppLogger.info('üß≠ Safe navigation: admin user, going to admin dashboard');
      context.go('/admin');
    } else {
      AppLogger.info('üß≠ Safe navigation: student user, going to student dashboard');
      context.go('/student');
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await Future.delayed(const Duration(milliseconds: 100));
    AppLogger.info('‚úÖ Safe screen navigation completed');
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
  static bool isOnMainNavigationScreen(String currentRoute) {
    const mainRoutes = [
      '/',
      '/student',
      '/admin',
      '/courses',
    ];
    
    return mainRoutes.any((route) => currentRoute == route || currentRoute.startsWith('$route?'));
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
  static String getParentRoute(String currentRoute, bool isAdmin) {
    AppLogger.info('üß≠ getParentRoute: currentRoute = $currentRoute, isAdmin = $isAdmin');
    
    // –î–ª—è —É—Ä–æ–∫–æ–≤
    if (currentRoute.contains('/lesson/')) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º courseId –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
      final courseIdMatch = RegExp(r'/course/([^/]+)').firstMatch(currentRoute);
      if (courseIdMatch != null) {
        final courseId = courseIdMatch.group(1);
        final parentRoute = isAdmin ? '/admin/courses/$courseId' : '/student/course/$courseId';
        AppLogger.info('üß≠ getParentRoute: lesson route -> $parentRoute');
        return parentRoute;
      }
    }
    
    // –î–ª—è –∫—É—Ä—Å–æ–≤ –∞–¥–º–∏–Ω–∞
    if (currentRoute.contains('/admin/courses/') && !currentRoute.contains('/lesson/')) {
      AppLogger.info('üß≠ getParentRoute: admin course -> /admin/courses');
      return '/admin/courses';
    }
    
    // –î–ª—è –∫—É—Ä—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
    if (currentRoute.contains('/student/course/') && !currentRoute.contains('/lesson/')) {
      AppLogger.info('üß≠ getParentRoute: student course -> /student');
      return '/student';
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    final defaultRoute = isAdmin ? '/admin' : '/student';
    AppLogger.info('üß≠ getParentRoute: default -> $defaultRoute');
    return defaultRoute;
  }
  
  /// –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –¥–ª—è AppBar
  static Widget buildSafeBackButton(BuildContext context, WidgetRef ref, {String? courseId}) {
    return IconButton(
      icon: const Icon(Icons.arrow_back),
      onPressed: () async {
        AppLogger.info('üß≠ Safe back button pressed');
        await safeGoBack(context, ref);
      },
      tooltip: '–ù–∞–∑–∞–¥',
    );
  }
  
  /// –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
  static Widget buildSafeAdminBackButton(BuildContext context, WidgetRef ref, {String? courseId}) {
    return IconButton(
      icon: const Icon(Icons.arrow_back),
      onPressed: () async {
        AppLogger.info('üß≠ Safe admin back button pressed');
        await safeGoBackForAdmin(context, ref, courseId);
      },
      tooltip: '–ù–∞–∑–∞–¥',
    );
  }
  
  /// –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –¥–ª—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
  static Widget buildSafeStudentBackButton(BuildContext context, WidgetRef ref, {String? courseId}) {
    return IconButton(
      icon: const Icon(Icons.arrow_back),
      onPressed: () async {
        AppLogger.info('üß≠ Safe student back button pressed');
        await safeGoBackForStudent(context, ref, courseId);
      },
      tooltip: '–ù–∞–∑–∞–¥',
    );
  }
  
  /// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  static void emergencyNavigateHome(BuildContext context) {
    AppLogger.error('üö® Emergency navigation to home');
    try {
      context.go('/');
    } catch (e) {
      AppLogger.error('‚ùå Emergency navigation failed: $e');
    }
  }
} 