import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../../shared/widgets/debug_log_screen.dart';

/// –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram WebApp
enum LogLevel { debug, info, warning, error }

/// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è Telegram WebApp.
/// 
/// –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
/// - –õ–æ–≥–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω–æ –≤ DebugLogScreen (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
/// - –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
/// - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–∞ –ª–æ–≥–∞
/// - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
class AppLogger {
  static ProviderContainer? _globalContainer;
  static final List<String> _localLogs = [];
  
  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
  static void initialize(ProviderContainer container) {
    _globalContainer = container;
  }
  
  /// Debug –ª–æ–≥–∏ - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
  static void debug(String message, [WidgetRef? ref]) {
    _log(LogLevel.debug, message, ref);
  }
  
  /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ª–æ–≥–∏ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static void info(String message, [WidgetRef? ref]) {
    _log(LogLevel.info, message, ref);
  }
  
  /// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  static void warning(String message, [WidgetRef? ref]) {
    _log(LogLevel.warning, message, ref);
  }
  
  /// –û—à–∏–±–∫–∏ - –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
  static void error(String message, [WidgetRef? ref]) {
    _log(LogLevel.error, message, ref);
  }
  
  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  static void _log(LogLevel level, String message, WidgetRef? ref) {
    final timestamp = DateTime.now().toString().substring(11, 19); // HH:mm:ss
    final emoji = _getEmojiForLevel(level);
    final formattedMessage = '[$timestamp] $emoji $message';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –¥–ª—è Telegram WebApp)
    try {
      WidgetRef? effectiveRef = ref;
      ProviderContainer? container = _globalContainer;
      
      if (effectiveRef != null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ref - –°–ò–ù–•–†–û–ù–ù–û –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
        final debugLogsNotifier = effectiveRef.read(debugLogsProvider.notifier);
        debugLogsNotifier.addLog(formattedMessage);
      } else if (container != null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π container - –°–ò–ù–•–†–û–ù–ù–û –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥
        final debugLogsNotifier = container.read(debugLogsProvider.notifier);
        debugLogsNotifier.addLog(formattedMessage);
      } else {
        // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
        _localLogs.add(formattedMessage);
      }
    } catch (e) {
      // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      _localLogs.add(formattedMessage);
      // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - —ç—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å debug –ø–∞–Ω–µ–ª—å
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    _saveToLocalStorage(formattedMessage);
    
    // –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (level == LogLevel.error) {
      _sendCriticalErrorToServer(message, ref);
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  static String _getEmojiForLevel(LogLevel level) {
    switch (level) {
      case LogLevel.debug:
        return 'üîß';
      case LogLevel.info:
        return '‚ÑπÔ∏è';
      case LogLevel.warning:
        return '‚ö†Ô∏è';
      case LogLevel.error:
        return '‚ùå';
    }
  }
  
  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  static void _saveToLocalStorage(String logMessage) {
    try {
      SharedPreferences.getInstance().then((prefs) {
        final existingLogs = prefs.getStringList('app_logs') ?? [];
        existingLogs.add(logMessage);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
        if (existingLogs.length > 1000) {
          existingLogs.removeRange(0, existingLogs.length - 1000);
        }
        
        prefs.setStringList('app_logs', existingLogs);
      });
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
    }
  }
  
  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  static void _sendCriticalErrorToServer(String message, WidgetRef? ref) {
    // –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ RemoteLogger
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–Ω—É—é –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∞—Ö
    try {
      if (ref != null) {
        ref.read(debugLogsProvider.notifier).addLog('üö® CRITICAL ERROR LOGGED: $message');
      }
    } catch (e) {
      // Ignore if provider is not available
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
  static Future<List<String>> getAllLogs() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final storedLogs = prefs.getStringList('app_logs') ?? [];
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏ —Ç–µ–∫—É—â–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
      final allLogs = [...storedLogs, ..._localLogs];
      return allLogs;
    } catch (e) {
      return _localLogs;
    }
  }
  
  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏
  static Future<void> clearAllLogs() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove('app_logs');
      _localLogs.clear();
    } catch (e) {
      _localLogs.clear();
    }
  }
  
  /// –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
  static Future<String> exportLogsAsJson() async {
    final logs = await getAllLogs();
    return jsonEncode({
      'app': 'Augmentek LMS',
      'platform': 'telegram_webapp',
      'exported_at': DateTime.now().toIso8601String(),
      'logs_count': logs.length,
      'logs': logs,
    });
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ shared/widgets/debug_log_screen.dart
/// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –æ—Ç—Ç—É–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ AppLogger 