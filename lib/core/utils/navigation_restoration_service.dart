import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:miniapp/core/utils/navigation_state_service.dart';
import 'package:miniapp/core/utils/app_logger.dart';
import 'package:miniapp/features/course/presentation/screens/lesson_view_screen.dart';
import 'package:miniapp/features/course/presentation/screens/lesson_edit_screen.dart';
import 'package:miniapp/features/course/presentation/screens/course_content_screen.dart';
import 'package:miniapp/features/course/providers/lesson_provider.dart';
import 'package:miniapp/features/course/providers/course_provider.dart';
import 'package:miniapp/shared/models/lesson.dart';
import 'package:miniapp/shared/models/course.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
class NavigationRestorationService {
  
  /// –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  static Future<bool> tryRestoreNavigation(BuildContext context, WidgetRef ref) async {
    try {
      final lastRoute = await NavigationStateService.getLastRoute();
      final params = await NavigationStateService.getLastRouteParams();
      
      if (lastRoute == null) {
        AppLogger.info('üß≠ No saved navigation state to restore');
        return false;
      }
      
      AppLogger.info('üß≠ Attempting to restore navigation: $lastRoute');
      
      // –ü–∞—Ä—Å–∏–º –º–∞—Ä—à—Ä—É—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (lastRoute.contains('/lesson/') && params != null) {
        return await _restoreLessonNavigation(context, ref, lastRoute, params);
      } else if (lastRoute.contains('/course/') && params != null) {
        return await _restoreCourseNavigation(context, ref, lastRoute, params);
      }
      
      AppLogger.info('üß≠ Unknown route format, cannot restore: $lastRoute');
      return false;
      
    } catch (e) {
      AppLogger.error('‚ùå Error restoring navigation: $e');
      return false;
    }
  }
  
  /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —É—Ä–æ–∫—É
  static Future<bool> _restoreLessonNavigation(
    BuildContext context,
    WidgetRef ref,
    String route,
    Map<String, String> params,
  ) async {
    final courseId = params['courseId'];
    final lessonId = params['lessonId'];
    final action = params['action'];
    
    if (courseId == null || lessonId == null) {
      AppLogger.warning('‚ö†Ô∏è Missing courseId or lessonId in saved navigation state');
      return false;
    }
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫
      AppLogger.info('üîÑ Loading lesson data for restoration: $lessonId');
      
      // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      final lessonState = ref.read(courseLessonsProvider(courseId));
      Lesson? lesson;
      
      await lessonState.when(
        data: (lessons) async {
          lesson = lessons.firstWhere(
            (l) => l.id == lessonId,
            orElse: () => throw Exception('Lesson not found'),
          );
        },
        loading: () async {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
          await ref.read(courseLessonsProvider(courseId).notifier).loadLessonsByCourse(courseId);
          final newState = ref.read(courseLessonsProvider(courseId));
          newState.whenData((lessons) {
            lesson = lessons.firstWhere(
              (l) => l.id == lessonId,
              orElse: () => throw Exception('Lesson not found'),
            );
          });
        },
        error: (error, stack) async {
          throw Exception('Error loading lessons: $error');
        },
      );
      
      if (lesson == null) {
        AppLogger.warning('‚ö†Ô∏è Lesson not found: $lessonId');
        return false;
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
      if (action == 'edit') {
        AppLogger.info('üß≠ Restoring lesson edit screen: ${lesson!.title}');
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => LessonEditScreen(lesson: lesson!),
          ),
        );
      } else {
        AppLogger.info('üß≠ Restoring lesson view screen: ${lesson!.title}');
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => LessonViewScreen(
              lesson: lesson!,
              courseId: courseId,
            ),
          ),
        );
      }
      
      return true;
      
    } catch (e) {
      AppLogger.error('‚ùå Error restoring lesson navigation: $e');
      return false;
    }
  }
  
  /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –∫—É—Ä—Å—É
  static Future<bool> _restoreCourseNavigation(
    BuildContext context,
    WidgetRef ref,
    String route,
    Map<String, String> params,
  ) async {
    final courseId = params['courseId'];
    
    if (courseId == null) {
      AppLogger.warning('‚ö†Ô∏è Missing courseId in saved navigation state');
      return false;
    }
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å
      AppLogger.info('üîÑ Loading course data for restoration: $courseId');
      
      final courseState = ref.read(courseProvider);
      Course? course;
      
      await courseState.when(
        data: (courses) async {
          course = courses.firstWhere(
            (c) => c.id == courseId,
            orElse: () => throw Exception('Course not found'),
          );
        },
        loading: () async {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã
          await ref.read(courseProvider.notifier).loadCourses();
          final newState = ref.read(courseProvider);
          newState.whenData((courses) {
            course = courses.firstWhere(
              (c) => c.id == courseId,
              orElse: () => throw Exception('Course not found'),
            );
          });
        },
        error: (error, stack) async {
          throw Exception('Error loading courses: $error');
        },
      );
      
      if (course == null) {
        AppLogger.warning('‚ö†Ô∏è Course not found: $courseId');
        return false;
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –∫—É—Ä—Å–∞
      AppLogger.info('üß≠ Restoring course content screen: ${course!.title}');
      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => CourseContentScreen(course: course!),
        ),
      );
      
      return true;
      
    } catch (e) {
      AppLogger.error('‚ùå Error restoring course navigation: $e');
      return false;
    }
  }
  
  /// –û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —è–≤–Ω–æ–º –≤—ã—Ö–æ–¥–µ)
  static Future<void> clearSavedState() async {
    await NavigationStateService.clearSavedRoute();
    AppLogger.info('üß≠ Navigation state cleared');
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
final navigationRestorationProvider = Provider<NavigationRestorationService>((ref) {
  return NavigationRestorationService();
}); 