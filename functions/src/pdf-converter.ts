import * as functions from 'firebase-functions';
import { getStorage } from 'firebase-admin/storage';
import * as path from 'path';
import * as os from 'os';
import * as fs from 'fs';

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç pdf2pic
const pdf2pic = require('pdf2pic');

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF —Ñ–∞–π–ª –≤ –Ω–∞–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (PNG)
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç URL PDF —Ñ–∞–π–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü
 */
export const convertPdfToImages = functions.https.onCall(async (data: any, context) => {
  try {
    const { pdfUrl, documentId } = data as { pdfUrl: string; documentId: string };
    
    if (!pdfUrl || !documentId) {
      throw new functions.https.HttpsError('invalid-argument', 'PDF URL and document ID are required');
    }

    console.log(`üîÑ Converting PDF to images: ${pdfUrl}`);
    
    // –°–∫–∞—á–∏–≤–∞–µ–º PDF —Ñ–∞–π–ª
    const response = await fetch(pdfUrl);
    if (!response.ok) {
      throw new functions.https.HttpsError('not-found', 'Failed to download PDF file');
    }
    
    const pdfBuffer = await response.arrayBuffer();
    const tempPdfPath = path.join(os.tmpdir(), `${documentId}.pdf`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(tempPdfPath, Buffer.from(pdfBuffer));
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    const convert = pdf2pic.fromPath(tempPdfPath, {
      density: 100,           // DPI –∫–∞—á–µ—Å—Ç–≤–∞
      saveFilename: "page",   // –ò–º—è —Ñ–∞–π–ª–∞
      savePath: os.tmpdir(),  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞
      format: "png",          // –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      width: 800,             // –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      height: 1132            // –í—ã—Å–æ—Ç–∞ (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ A4)
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const convertResults = await convert.bulk(-1); // -1 = –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    console.log(`üìÑ Converted ${convertResults.length} pages`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Firebase Storage
    const bucket = getStorage().bucket();
    const imageUrls: string[] = [];
    
    for (let i = 0; i < convertResults.length; i++) {
      const result = convertResults[i];
      const imagePath = result.path;
      
      if (imagePath && fs.existsSync(imagePath)) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
        const fileName = `pdf-pages/${documentId}/page_${i + 1}.png`;
        const file = bucket.file(fileName);
        
        await file.save(fs.readFileSync(imagePath), {
          metadata: {
            contentType: 'image/png',
            cacheControl: 'public, max-age=31536000' // –ö–µ—à –Ω–∞ –≥–æ–¥
          }
        });
        
        // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω—ã–º
        await file.makePublic();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        const publicUrl = `https://storage.googleapis.com/${bucket.name}/${fileName}`;
        imageUrls.push(publicUrl);
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(imagePath);
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF
    fs.unlinkSync(tempPdfPath);
    
    console.log(`‚úÖ PDF converted successfully: ${imageUrls.length} pages`);
    
    return {
      success: true,
      pages: imageUrls.length,
      imageUrls: imageUrls
    };
    
  } catch (error) {
    console.error('‚ùå PDF conversion error:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    throw new functions.https.HttpsError('internal', `Failed to convert PDF: ${errorMessage}`);
  }
});

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è PDF –ø–æ documentId
 */
export const getPdfImages = functions.https.onCall(async (data: any, context) => {
  try {
    const { documentId } = data as { documentId: string };
    
    if (!documentId) {
      throw new functions.https.HttpsError('invalid-argument', 'Document ID is required');
    }
    
    const bucket = getStorage().bucket();
    const [files] = await bucket.getFiles({
      prefix: `pdf-pages/${documentId}/`,
      delimiter: '/'
    });
    
    const imageUrls = files
      .filter(file => file.name.endsWith('.png'))
      .sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageA = parseInt(a.name.match(/page_(\d+)\.png/)?.[1] || '0');
        const pageB = parseInt(b.name.match(/page_(\d+)\.png/)?.[1] || '0');
        return pageA - pageB;
      })
      .map(file => `https://storage.googleapis.com/${bucket.name}/${file.name}`);
    
    return {
      success: true,
      pages: imageUrls.length,
      imageUrls: imageUrls
    };
    
  } catch (error) {
    console.error('‚ùå Get PDF images error:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    throw new functions.https.HttpsError('internal', `Failed to get PDF images: ${errorMessage}`);
  }
}); 