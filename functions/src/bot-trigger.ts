import { onRequest } from "firebase-functions/v2/https";
import { onDocumentCreated, onDocumentUpdated } from "firebase-functions/v2/firestore";
import { logger } from "firebase-functions";
import { getFirestore } from "firebase-admin/firestore";
import { getStorage } from "firebase-admin/storage";

const BOT_TOKEN = process.env.BOT_TOKEN || "";
const TELEGRAM_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
const db = getFirestore();
const storage = getStorage();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(chatId: number, text: string, replyMarkup?: any): Promise<any> {
  try {
    const fetch = (await import('node-fetch')).default;
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        reply_markup: replyMarkup
      })
    });
    return await response.json();
  } catch (error) {
    logger.error(`Error sending message to ${chatId}:`, error);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart(chatId: number, firstName: string) {
  const message = 
    `üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Augmentek LMS!</b>\n\n` +
    `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n\n` +
    `üìö –ù–æ–≤—ã—Ö –∫—É—Ä—Å–∞—Ö –∏ —É—Ä–æ–∫–∞—Ö\n` +
    `üìù –î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö\n` +
    `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏\n` +
    `üìé –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã\n\n` +
    `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
    `/homework - –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n` +
    `/progress - –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å–∞–º\n` +
    `/help - —Å–ø—Ä–∞–≤–∫–∞\n\n` +
    `üöÄ <a href="https://augmentek-lms.web.app">–û—Ç–∫—Ä—ã—Ç—å LMS</a>`;

  const replyMarkup = {
    inline_keyboard: [
      [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å LMS", web_app: { url: "https://augmentek-lms.web.app" } }]
    ]
  };

  await sendMessage(chatId, message, replyMarkup);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /homework
async function handleHomework(chatId: number) {
  try {
    const homeworkQuery = await db.collection('homework_submissions')
      .where('studentId', '==', chatId.toString())
      .orderBy('submittedAt', 'desc')
      .limit(10)
      .get();

    if (homeworkQuery.empty) {
      await sendMessage(chatId, 
        "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.\n\nüöÄ –û—Ç–∫—Ä–æ–π—Ç–µ LMS —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã!",
        { inline_keyboard: [
          [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å LMS", web_app: { url: "https://augmentek-lms.web.app" } }]
        ]}
      );
      return;
    }

    let message = "üìù <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n";
    
    homeworkQuery.docs.forEach((doc, index) => {
      const hw = doc.data();
      const statusEmoji = hw.status === 'pending' ? '‚è≥' : 
                         hw.status === 'approved' ? '‚úÖ' : 'üîÑ';
      message += `${index + 1}. ${statusEmoji} <b>–£—Ä–æ–∫ ${hw.lessonId}</b>\n`;
      message += `   üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date(hw.submittedAt.toDate()).toLocaleDateString('ru-RU')}\n`;
      if (hw.adminComment) {
        message += `   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${hw.adminComment}\n`;
      }
      message += "\n";
    });

    await sendMessage(chatId, message, {
      inline_keyboard: [
        [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ LMS", web_app: { url: "https://augmentek-lms.web.app" } }]
      ]
    });

  } catch (error) {
    logger.error("Error fetching homework:", error);
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /progress
async function handleProgress(chatId: number) {
  try {
    const homeworkQuery = await db.collection('homework_submissions')
      .where('studentId', '==', chatId.toString())
      .get();

    const homework = homeworkQuery.docs.map(doc => doc.data());
    
    const stats = {
      activeCourses: new Set(homework.map(hw => hw.courseId).filter(Boolean)).size,
      completedHomework: homework.filter(hw => hw.status === 'approved').length,
      pendingHomework: homework.filter(hw => hw.status === 'pending').length,
      needsWorkHomework: homework.filter(hw => hw.status === 'needsWork').length,
      overallProgress: Math.round((homework.filter(hw => hw.status === 'approved').length / Math.max(homework.length, 1)) * 100)
    };

    const message = 
      `üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:</b>\n\n` +
      `üìö –ö—É—Ä—Å–æ–≤ –∏–∑—É—á–∞–µ—Ç—Å—è: ${stats.activeCourses}\n` +
      `üìù –ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.completedHomework}\n` +
      `‚è≥ –ó–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${stats.pendingHomework}\n` +
      `üîÑ –ó–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ: ${stats.needsWorkHomework}\n\n` +
      `üéØ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${stats.overallProgress}%`;

    await sendMessage(chatId, message, {
      inline_keyboard: [
        [{ text: "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", web_app: { url: "https://augmentek-lms.web.app" } }]
      ]
    });

  } catch (error) {
    logger.error("Error fetching progress:", error);
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async function handleHelp(chatId: number) {
  const message = 
    "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n" +
    "üöÄ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n" +
    "üìù /homework - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n" +
    "üìä /progress - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è\n" +
    "‚ùì /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
    "<b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:</b>\n" +
    "üìé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é\n\n" +
    "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n" +
    "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF, DOC, DOCX, TXT\n" +
    "üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG, GIF\n" +
    "üéµ –ê—É–¥–∏–æ: MP3, WAV, M4A\n" +
    "üé• –í–∏–¥–µ–æ: MP4, MOV, AVI";

  await sendMessage(chatId, message, {
    inline_keyboard: [
      [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å LMS", web_app: { url: "https://augmentek-lms.web.app" } }]
    ]
  });
}

// ===============================
// WEBHOOK ENDPOINT
// ===============================

export const telegramBot = onRequest({
  secrets: ["BOT_TOKEN"]
}, async (req, res) => {
  try {
    const update = req.body;
    
    if (!update.message) {
      res.status(200).send("OK");
      return;
    }

    const message = update.message;
    const chatId = message.chat.id;
    const text = message.text;
    const firstName = message.from?.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text && text.startsWith('/')) {
      switch (text.split(' ')[0]) {
        case '/start':
          await handleStart(chatId, firstName);
          break;
        case '/homework':
          await handleHomework(chatId);
          break;
        case '/progress':
          await handleProgress(chatId);
          break;
        case '/help':
          await handleHelp(chatId);
          break;
        default:
          await sendMessage(chatId, 
            "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            { inline_keyboard: [
              [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å LMS", web_app: { url: "https://augmentek-lms.web.app" } }]
            ]}
          );
      }
    } else if (message.document || message.photo || message.audio || message.video || message.voice) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
      await handleFileUpload(chatId, message);
    } else {
      // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await sendMessage(chatId,
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é:\n\n" +
        "üìù –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è (/homework)\n" +
        "üìä –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (/progress)\n" +
        "üìé –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π\n\n" +
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ LMS:",
        { inline_keyboard: [
          [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å LMS", web_app: { url: "https://augmentek-lms.web.app" } }]
        ]}
      );
    }

    res.status(200).send("OK");
  } catch (error) {
    logger.error("Error in telegram webhook:", error);
    res.status(500).send("Internal Server Error");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
async function handleFileUpload(chatId: number, message: any) {
  try {
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeHomework = await findActiveHomeworkForUser(chatId);
    
    if (!activeHomework) {
      await sendMessage(chatId,
        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.\n\n" +
        "–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ LMS.",
        { inline_keyboard: [
          [{ text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å LMS", web_app: { url: "https://augmentek-lms.web.app" } }]
        ]}
      );
      return;
    }

    await sendMessage(chatId, "üìé –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...");

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    let fileId = "";
    let fileName = "";
    let fileSize = 0;

    if (message.document) {
      fileId = message.document.file_id;
      fileName = message.document.file_name || "document";
      fileSize = message.document.file_size || 0;
    } else if (message.photo) {
      const photo = message.photo[message.photo.length - 1];
      fileId = photo.file_id;
      fileName = `photo_${Date.now()}.jpg`;
      fileSize = photo.file_size || 0;
    } else if (message.audio) {
      fileId = message.audio.file_id;
      fileName = message.audio.file_name || `audio_${Date.now()}.mp3`;
      fileSize = message.audio.file_size || 0;
    } else if (message.video) {
      fileId = message.video.file_id;
      fileName = message.video.file_name || `video_${Date.now()}.mp4`;
      fileSize = message.video.file_size || 0;
    } else if (message.voice) {
      fileId = message.voice.file_id;
      fileName = `voice_${Date.now()}.oga`;
      fileSize = message.voice.file_size || 0;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (max 20MB)
    if (fileSize > 20 * 1024 * 1024) {
      await sendMessage(chatId, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë");
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Firebase Storage
    const fileUrl = await uploadTelegramFile(fileId, fileName, activeHomework.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–∞–π–ª
    await updateHomeworkWithFile(activeHomework.id, fileUrl, fileName);

    await sendMessage(chatId,
      `‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n` +
      `üìÅ –§–∞–π–ª: ${fileName}\n` +
      `üìù –ó–∞–¥–∞–Ω–∏–µ: –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n` +
      `–§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –≤–∞—à–µ–º—É –æ—Ç–≤–µ—Ç—É –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.`,
      { inline_keyboard: [
        [{ text: "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ LMS", web_app: { url: "https://augmentek-lms.web.app" } }]
      ]}
    );

  } catch (error) {
    logger.error("Error handling file upload:", error);
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

async function findActiveHomeworkForUser(telegramId: number) {
  try {
    const userId = telegramId.toString();
    
    // –ò—â–µ–º –∑–∞–¥–∞–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º needsWork –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ pending –∑–∞–¥–∞–Ω–∏–µ
    const needsWorkQuery = await db.collection('homework_submissions')
      .where('studentId', '==', userId)
      .where('status', '==', 'needsWork')
      .limit(1)
      .get();

    if (!needsWorkQuery.empty) {
      return {
        id: needsWorkQuery.docs[0].id,
        ...needsWorkQuery.docs[0].data()
      };
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ pending
    const pendingQuery = await db.collection('homework_submissions')
      .where('studentId', '==', userId)
      .where('status', '==', 'pending')
      .orderBy('submittedAt', 'desc')
      .limit(1)
      .get();

    if (!pendingQuery.empty) {
      return {
        id: pendingQuery.docs[0].id,
        ...pendingQuery.docs[0].data()
      };
    }

    return null;
  } catch (error) {
    logger.error("Error finding active homework:", error);
    return null;
  }
}

async function uploadTelegramFile(fileId: string, fileName: string, homeworkId: string): Promise<string> {
  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
  const fetch = (await import('node-fetch')).default;
  const fileInfoResponse = await fetch(`${TELEGRAM_API_URL}/getFile?file_id=${fileId}`);
  const fileInfo: any = await fileInfoResponse.json();
  
  if (!fileInfo.ok) throw new Error("Failed to get file info");
  
  const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.result.file_path}`;
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Firebase Storage
  const bucket = storage.bucket();
  const filePath = `homework_files/${homeworkId}/${fileName}`;
  const file = bucket.file(filePath);
  
  // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Telegram –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
  const response = await fetch(fileUrl);
  const buffer = await response.buffer();
  
  await file.save(buffer);
  await file.makePublic();
  
  return `https://storage.googleapis.com/${bucket.name}/${filePath}`;
}

async function updateHomeworkWithFile(homeworkId: string, fileUrl: string, fileName: string) {
  await db.collection('homework_submissions').doc(homeworkId).update({
    fileUrl,
    fileName,
    fileUploadedAt: new Date()
  });
}

// ===============================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (TRIGGERS)
// ===============================

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏
export const notifyNewHomework = onDocumentCreated(
  "homework_submissions/{submissionId}",
  async (event) => {
    const submission = event.data?.data();
    if (!submission) return;

    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
      const adminIds = [142170313]; // ID –∞–¥–º–∏–Ω–æ–≤
      
      const message = 
        `üîî <b>–ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>\n\n` +
        `üë§ –°—Ç—É–¥–µ–Ω—Ç: ${submission.studentName || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n` +
        `üìö –ó–∞–¥–∞–Ω–∏–µ: ${submission.lessonId}\n` +
        `üìù –û—Ç–≤–µ—Ç: ${submission.answer?.substring(0, 100) || '–§–∞–π–ª'}...\n` +
        `üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date(submission.submittedAt.toDate()).toLocaleDateString('ru-RU')}`;

      const replyMarkup = {
        inline_keyboard: [
          [{ text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", web_app: { url: "https://augmentek-lms.web.app/admin" } }]
        ]
      };

      for (const adminId of adminIds) {
        await sendMessage(adminId, message, replyMarkup);
      }

      logger.info(`Notified admins about new homework submission: ${event.params.submissionId}`);
    } catch (error) {
      logger.error("Error sending new homework notification:", error);
    }
  }
);

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
export const notifyHomeworkReviewed = onDocumentUpdated(
  "homework_submissions/{submissionId}",
  async (event) => {
    const before = event.data?.before.data();
    const after = event.data?.after.data();
    
    if (!before || !after) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
    if (before.status === after.status) return;
    
    try {
      const message = after.status === 'approved' 
        ? `‚úÖ <b>–í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –∑–∞—á—Ç–µ–Ω–∞!</b>\n\n` +
          `üìö –ó–∞–¥–∞–Ω–∏–µ: ${after.lessonId}\n` +
          `üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª –≤–∞—à—É —Ä–∞–±–æ—Ç—É.`
        : `üîÑ <b>–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É</b>\n\n` +
          `üìö –ó–∞–¥–∞–Ω–∏–µ: ${after.lessonId}\n` +
          `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${after.adminComment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`;

      const replyMarkup = {
        inline_keyboard: [
          [{ text: "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", web_app: { url: "https://augmentek-lms.web.app" } }]
        ]
      };

      const studentTelegramId = parseInt(after.studentId);
      if (!isNaN(studentTelegramId)) {
        await sendMessage(studentTelegramId, message, replyMarkup);
      }

      logger.info(`Notified student ${after.studentId} about homework review`);
    } catch (error) {
      logger.error("Error sending homework review notification:", error);
    }
  }
);