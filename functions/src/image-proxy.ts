import { onRequest } from 'firebase-functions/v2/https';
import { logger } from 'firebase-functions';
import { getStorage } from 'firebase-admin/storage';

export const imageProxy = onRequest({
  cors: true,
  region: 'europe-west1',
}, async (req, res) => {
  try {
    // –¢–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== 'GET') {
      res.status(405).send('Method not allowed');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const imagePath = req.query.path as string;
    if (!imagePath) {
      res.status(400).send('Missing path parameter');
      return;
    }

    logger.info(`üñºÔ∏è Image proxy request for: ${imagePath}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Firebase Storage
    const bucket = getStorage().bucket();
    const file = bucket.file(imagePath);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [exists] = await file.exists();
    if (!exists) {
      logger.warn(`üñºÔ∏è Image not found: ${imagePath}`);
      res.status(404).send('Image not found');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
    const [metadata] = await file.getMetadata();
    const contentType = metadata.contentType || 'image/jpeg';

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Telegram WebApp
    res.set({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET',
      'Access-Control-Allow-Headers': 'Content-Type',
      'Content-Type': contentType,
      'Cache-Control': 'public, max-age=3600', // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
    });

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
    const stream = file.createReadStream();
    
    stream.on('error', (error) => {
      logger.error(`üñºÔ∏è Stream error for ${imagePath}:`, error);
      if (!res.headersSent) {
        res.status(500).send('Error reading image');
      }
    });

    stream.on('end', () => {
      logger.info(`üñºÔ∏è Successfully served image: ${imagePath}`);
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É
    stream.pipe(res);

  } catch (error) {
    logger.error('üñºÔ∏è Image proxy error:', error);
    if (!res.headersSent) {
      res.status(500).send('Internal server error');
    }
  }
}); 